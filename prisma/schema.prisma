// Define the datasource for PostgreSQL
datasource db {
  provider     = "postgresql" // PostgreSQL database
  url          = env("DATABASE_URL") // Connection URL from the .env file
  relationMode = "prisma"
}

// Define the Prisma client generator
generator client {
  provider = "prisma-client-js"
}

// Define the User model
model User {
  id        Int      @id @default(autoincrement()) // Auto incrementing primary key
  name      String   // Name field (removed incorrect @map)
  username  String   @unique // Unique username
  email     String   @unique // Unique email (added @unique constraint)
  password  String   // Store the user's hashed password
  createdAt DateTime @default(now()) // Automatically set to current timestamp
}

// Define the File model
model File {
  id           String    @id @default(uuid()) // Unique file ID
  fileName     String    @unique // Original file name
  originalName String?   // File name when uploaded
  filePath     String    @unique // File path or cloud storage URL
  size         Int       // File size in bytes
  type         String    // MIME type (e.g., image/png, application/pdf)
  createdAt    DateTime  @default(now()) // Timestamp
  isVisible    Boolean   @default(true)
  
  // Fixed relations - separate relations with different names
  productsAsDataSheet Product[] @relation("ProductDataSheet")
  productsAsImage     Product[] @relation("ProductImages")
  
  // Added missing relation
  news News[]
}

// Define the Product model
model Product {
  id          String    @id @default(uuid())
  name        String    @unique
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  subCategory Tag[]     // Many-to-many relation with Tag
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now()) // Timestamp
  
  // Fixed relations - separate relations with different names
  dataSheet   File      @relation("ProductDataSheet", fields: [dataSheetId], references: [id])
  dataSheetId String
  
  // Fixed many-to-many relation
  images      File[]    @relation("ProductImages")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) // Timestamp
  products  Product[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) // Timestamp
  products  Product[]
}

// Define News model
model News {
  id          String   @id @default(uuid()) // Fixed missing parentheses
  title       String
  description String   
  createdAt   DateTime @default(now())
  image       File     @relation(fields: [imageId], references: [id])
  imageId     String
  isActive    Boolean  @default(true)
}